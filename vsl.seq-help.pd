#N canvas 241 87 1364 813 12;
#X floatatom 27 521 5 0 0 0 - - - 0;
#X obj 39 550 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X text 27 65 PARAMETERS;
#X text 116 156 length, f 12;
#X text 116 181 1, f 12;
#X text 116 205 float (1-32);
#X text 226 156 color, f 23;
#X text 226 181 2, f 23;
#X text 416 156 height, f 12;
#X text 416 205 float (0-32);
#X text 416 229 3 (default), f 12;
#X text 116 229 16 (default);
#X text 524 205 float (0-32), f 17;
#X text 524 156 grid, f 17;
#X text 416 181 3, f 12;
#X text 524 181 4, f 17;
#X text 668 181 5, f 14;
#X floatatom 670 261 5 0 0 0 - - - 0;
#X obj 670 287 s \$0-receive;
#X text 63 549 bang to increase pos;
#X text 72 520 set absolute position;
#X text 793 181 6, f 14;
#X text 1120 65 EXAMPLES;
#X msg 27 399 set 1 0;
#X msg 35 424 set 1 1;
#X text 25 372 set single values;
#X obj 27 451 s \$0-receive;
#X text 668 229 \$0-receive, f 14;
#X obj 795 260 r \$0-send;
#X obj 188 451 s \$0-receive;
#N canvas 857 287 217 454 easings 0;
#X msg 27 105 inout-cubic;
#X msg 27 76 inout;
#X msg 27 213 in-cubic;
#X msg 27 184 in;
#X msg 27 321 out-cubic;
#X msg 27 292 out;
#X msg 27 27 linear;
#X msg 97 27 line;
#X msg 90 76 inout-sine;
#X msg 75 184 in-sine;
#X msg 74 292 out-sine;
#X msg 27 350 out-expo;
#X msg 27 379 out-bounce;
#X msg 27 242 in-expo;
#X msg 27 134 inout-expo;
#X msg 27 408 out-elastic;
#X text 81 26 =;
#X text 74 75 =;
#X text 59 184 =;
#X text 58 291 =;
#X restore 510 483 pd easings;
#X text 186 372 transition single values;
#X msg 188 399 set 1 0 500;
#X msg 196 424 set 1 1 1000;
#X text 24 342 INPUTS/OUTPUTS;
#X msg 175 616 pos-abs 6;
#X obj 396 451 s \$0-receive;
#X text 394 372 ease single values;
#X text 300 483 See possible ease-modes here:;
#X msg 404 424 set 1 1 1000 inout-expo;
#X msg 396 399 set 1 0 500 out;
#X obj 602 451 s \$0-receive;
#X floatatom 72 767 2 0 0 0 - - - 0;
#X text 91 768 left outlet outputs only values >0;
#X obj 439 636 s \$0-receive;
#X text 436 557 run through cycle;
#X obj 439 699 bng 31 250 50 0 empty empty empty 17 7 0 10 #e0c4fc
#000000 #000000;
#X obj 439 673 r done;
#X text 550 608 2nd is callback receiver;
#X obj 762 636 s \$0-receive;
#X text 760 557 stumble through cycle;
#X msg 49 577 reset;
#X msg 610 424 0.6 0.2 0.5 0.4 0.3 0.8 0.9 0;
#X text 600 372 transition all values (ease is optional);
#X msg 602 399 0.1 0.2 0.4 0.6 0.8 0.9 1 2000 out-bounce;
#X obj 1 324 cnv 1 1360 2 empty empty empty 20 12 0 14 #f0f0f0 #404040
0;
#X obj 928 451 s \$0-receive;
#X text 925 372 go to random index;
#X msg 928 399 random;
#X text 793 229 \$0-send, f 14;
#X text 226 205 float (0-999) or string;
#N canvas 0 50 450 250 (subpatch) 0;
#X array \$0-wave 131 float 0;
#X coords 0 1 130 -1 131 100 1 0 0;
#X restore 1180 678 graph;
#X text 1177 557 use as controller;
#N canvas 480 395 536 492 harmonics 0;
#X obj 41 34 inlet;
#X obj 131 151 list trim;
#X obj 99 95 t b l;
#X obj 41 58 route edit values;
#X obj 131 334 s \$0-wave;
#X obj 131 127 list prepend sinesum 128;
#X msg 41 384 output;
#X obj 41 408 s \$0-wavecontrol;
#X obj 99 250 min;
#X msg 99 283 normalize \$1;
#X msg 99 226 1;
#X obj 144 204 r \$0-normalize-range;
#X connect 0 0 3 0;
#X connect 1 0 4 0;
#X connect 2 0 10 0;
#X connect 2 1 5 0;
#X connect 3 0 6 0;
#X connect 3 1 2 0;
#X connect 5 0 1 0;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 4 0;
#X connect 10 0 8 0;
#X connect 11 0 8 1;
#X restore 1212 633 pd harmonics;
#X obj 406 767 cnv 15 16 16 empty empty empty 20 12 0 14 #faff00 #404040
0;
#X text 409 766 !;
#X obj 72 694 vsl.seq 4 -height 4 -color 324 -grid 4;
#A saved 0 2 0 1;
#X obj 27 635 vsl.seq 7 -color 879 -receiver \$0-receive -sender \$0-send
;
#A saved 0.9 0.5 0.4 0.6 0.2 0.3 0.8;
#X obj 1180 584 vsl.seq 8 -height 3 -color navy -receiver \$0-wavecontrol
-partition 8;
#A saved 1 0.5 0.333333 0.25 0.2 0.166667 0.142857 0.125;
#X text 500 583 1st param is cycle duration;
#X msg 439 584 run 800;
#X text 431 758 Behind the upper square of each slider is a bang object
to switch to this position For manipulating values \, drag from the
lower parts of the slider., f 84;
#X text 759 670 stumble mode will divide the set cycle duration according
to the set values for each step. values of 0 are skipped., f 39;
#X text 479 699 See callback after run or stumble here., f 20;
#X text 173 640 right inlet accepts "pos-abs" messages only to easily
connect 2 modules., f 27;
#X text 919 229 visualize partition groups, f 16;
#X text 226 229 900 (red) \; lime \; bright-green, f 23;
#X text 26 156 KEY:, f 5;
#X text 26 181 POSITION:;
#X text 26 205 VALUE:;
#X text 26 229 EXAMPLE:;
#X obj 228 287 bng 19 250 50 0 \$0-show-colors empty click\\\ to\\\ show\\\ colors
23 10 0 12 #ffffff #000000 #000000;
#X obj 1123 105 bng 19 250 50 0 \$0-show-examples empty click\\\ for\\\ examples
23 10 0 12 #ffffff #000000 #000000;
#X msg 447 609 run 2000 done;
#X msg 770 609 stumble -1000 done;
#X msg 762 584 stumble -2000;
#X text 907 608 negative duration and callback;
#X text 863 583 cycle backwards via negative duration;
#X text 926 474 will jump to position based on weighted value probability.
, f 23;
#X obj 1123 498 s \$0-receive;
#X msg 1123 399 permute 1 2 3 4 5 6 0;
#X text 1131 420 either by list of indices;
#X text 1192 442 or randomly;
#X obj 1 1 cnv 15 1360 48 empty empty empty 20 12 0 14 #f0f0f0 #404040
0;
#X text 25 15 vsl.seq : sequencer with step velocities and multiple
input/output/manipulation options, f 89;
#N canvas 575 267 803 641 helpers 0;
#X obj 93 191 pdcontrol;
#X msg 93 164 dir;
#X obj 40 251 pack s s;
#X obj 93 134 loadbang;
#X msg 40 282 \; pd open \$1 \$2;
#X obj 93 221 makefilename %s/;
#X msg 40 65 vsl.seq-help.colors.pd;
#X obj 40 40 r \$0-show-colors;
#X msg 230 65 vsl.seq-help.examples.pd;
#X obj 230 40 r \$0-show-examples;
#X obj 556 41 loadbang;
#X obj 602 119 s \$0-wavecontrol;
#X obj 556 202 until;
#X msg 556 178 8;
#X obj 556 65 t b b b;
#X msg 579 148 0;
#X obj 556 226 f;
#X obj 585 226 + 1;
#X msg 602 95 reset;
#X obj 556 261 t f f;
#X obj 556 342 pipe;
#X obj 556 366 t f f;
#X msg 588 420 1 \$1;
#X obj 588 444 /;
#X obj 556 473 pack f f 1000;
#X obj 556 497 list prepend set;
#X obj 556 521 list append out;
#X obj 556 545 list trim;
#X obj 556 569 s \$0-wavecontrol;
#X obj 588 396 + 1;
#X obj 588 291 + 2;
#X obj 588 315 * 400;
#X obj 381 474 sel 0;
#X msg 381 498 0 \, 1 1000;
#X obj 381 522 line;
#X obj 381 546 s \$0-normalize-range;
#X connect 0 0 5 0;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 3 0 1 0;
#X connect 5 0 2 1;
#X connect 6 0 2 0;
#X connect 7 0 6 0;
#X connect 8 0 2 0;
#X connect 9 0 8 0;
#X connect 10 0 14 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 13 0;
#X connect 14 1 15 0;
#X connect 14 2 18 0;
#X connect 15 0 16 1;
#X connect 16 0 17 0;
#X connect 16 0 19 0;
#X connect 17 0 16 1;
#X connect 18 0 11 0;
#X connect 19 0 20 0;
#X connect 19 1 30 0;
#X connect 20 0 21 0;
#X connect 21 0 24 0;
#X connect 21 0 32 0;
#X connect 21 1 29 0;
#X connect 22 0 23 0;
#X connect 23 0 24 1;
#X connect 24 0 25 0;
#X connect 25 0 26 0;
#X connect 26 0 27 0;
#X connect 27 0 28 0;
#X connect 29 0 22 0;
#X connect 30 0 31 0;
#X connect 31 0 20 1;
#X connect 32 0 33 0;
#X connect 33 0 34 0;
#X connect 34 0 35 0;
#X restore 1274 16 pd helpers;
#X msg 1131 443 shuffle;
#X msg 1019 399 seed 42;
#X text 1015 420 seed randoms;
#X text 26 120 length can also be set by just providing a number without
a key for convenience., f 82;
#X text 26 99 You can initialize the following parameters via -<key>
<value>., f 64;
#X text 524 229 rasterizes scale outputs to ints, f 16;
#X obj 795 287 print sent messages;
#X text 668 156 receiver, f 14;
#X text 793 156 sender, f 14;
#X text 920 156 partition;
#X text 919 205 float (0-32), f 16;
#X text 668 205 string, f 14;
#X text 793 204 string, f 14;
#X text 1208 470 sort;
#X msg 1147 471 sort -1;
#X text 1120 372 permute/shuffle/sort values;
#X msg 239 550 sum;
#X text 97 576 reset all;
#X text 292 576 output all;
#X text 272 549 output value sum;
#X msg 239 577 output;
#X connect 0 0 67 0;
#X connect 1 0 67 0;
#X connect 17 0 18 0;
#X connect 23 0 26 0;
#X connect 24 0 26 0;
#X connect 28 0 102 0;
#X connect 32 0 29 0;
#X connect 33 0 29 0;
#X connect 35 0 67 1;
#X connect 39 0 36 0;
#X connect 40 0 36 0;
#X connect 47 0 46 0;
#X connect 51 0 67 0;
#X connect 52 0 41 0;
#X connect 54 0 41 0;
#X connect 58 0 56 0;
#X connect 66 0 42 0;
#X connect 67 1 66 1;
#X connect 68 1 63 0;
#X connect 70 0 44 0;
#X connect 83 0 44 0;
#X connect 84 0 49 0;
#X connect 85 0 49 0;
#X connect 90 0 89 0;
#X connect 96 0 89 0;
#X connect 97 0 56 0;
#X connect 110 0 89 0;
#X connect 112 0 67 0;
#X connect 116 0 67 0;
